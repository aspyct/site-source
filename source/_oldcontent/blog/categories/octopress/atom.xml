<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: octopress | Aspyct.org]]></title>
  <link href="http://aspyct.github.com/aspyct/blog/categories/octopress/atom.xml" rel="self"/>
  <link href="http://aspyct.github.com/aspyct/"/>
  <updated>2014-02-09T21:36:31+01:00</updated>
  <id>http://aspyct.github.com/aspyct/</id>
  <author>
    <name><![CDATA[Antoine d'Otreppe]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Custom page layout with Jekyll and Octopress]]></title>
    <link href="http://aspyct.github.com/aspyct/blog/2012/09/15/custom-page-layout-with-octopress-jekyll/"/>
    <updated>2012-09-15T22:06:00+02:00</updated>
    <id>http://aspyct.github.com/aspyct/blog/2012/09/15/custom-page-layout-with-octopress-jekyll</id>
    <content type="html"><![CDATA[<p>When you write a Jekyll (or Octopress) page, you may chose to use a custom layout. For example, the <a href="/praline">page for Praliné</a> sports a few buttons at the top, linking to important project resources. Let's walk through an example with this project layout.</p>

<!-- more -->


<h2>Creating the custom layout</h2>

<p>First, let's create our custom layout. Since it is pretty similar to a simple page, we'll just copy the page layout first. The following commands assume you're working with octopress, but they should be pretty similar for jekyll.</p>

<p><code>sh
cp source/_layouts/page.html source/_layouts/project.html
</code></p>

<p>We also need to select the <code>project</code> layout in our project page. In my case, we're talking about <code>praline/index.markdown</code>. So change the <code>layout</code> attribute in the yaml front-matter.</p>

<p><code>
layout: project
title: "Praliné"
</code></p>

<p>Now, next time you generate the article, the <code>project</code> layout will be used instead of <code>page</code>. Go ahead and do a simple test by writing some funny text in the new layout.</p>

<h2>Adding data to your page</h2>

<p>Of course, you probably want to add some metadata to your page, and use it to render the final html. In my case, I wanted to add custom links. Simply add this information in the yaml front-matter.</p>

<p>```
layout: project
title: "Praliné"
date: 2012-09-15 00:53
links:
  - Source: https://github.com/aspyct/praline
  - Documentation: http://rubydoc.info/gems/praline/frames
  - Rubygems: https://rubygems.org/gems/praline
  - Zipball: https://github.com/aspyct/praline/zipball/master</p>

<p>```</p>

<p>And this data can be retreived through the <code>page</code> object in your layout. For example, to access the links, I need to access <code>page.links</code>. I'm using these links to create buttons in my layout with the following code:</p>

<p>```html
<ul class="project-links">
  {% for link_hash in page.links %}</p>

<pre><code>{% for link in link_hash %}
  &lt;li&gt;&lt;a class="button" href="{{ link[1] }}"&gt;{{ link[0] }}&lt;/a&gt;&lt;/li&gt;
{% endfor %}
</code></pre>

<p>  {% endfor %}
</ul>
```</p>

<h2>Do it with style</h2>

<p>But these links do not look good, definitely... We need to add some css styling. The easiest way to do so is edit the <code>sass/custom/_styles.scss</code> file, and add the following:</p>

<p>```sass
ul.project-links {</p>

<pre><code>margin-top: 10px;
list-style-type: none;

li {
    display: inline;
}

a {
    background: darken($main-bg, 5);
    display: inline-block;
    padding: .4em .8em;
    margin-right: .5em;
    border: 1px solid lighten($link-color-hover, 10);
    text-decoration: none;
    color: mix($text-color, $text-color-light);
    @extend .serif;
    @include transition(background-color .5s);
    &amp;:hover {
      background: $link-color-hover;
      text-shadow: none;
      color: $main-bg;
    }
}
</code></pre>

<p>}
```</p>

<p>But if you want to do it clean, I invite you to create your own style pack. Look around in the <code>sass</code> directory for directions.</p>

<h2>A last note</h2>

<p>We worked directly in the <code>source</code> and <code>sass</code> directories of Octopress. That way, we had instant feedback on our work. But if you try to install another theme, all your good work could be lost instantly. You should definitely save it into the <code>.themes</code> directory.</p>

<p>Hope this is useful :)</p>
]]></content>
  </entry>
  
</feed>
